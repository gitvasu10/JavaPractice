import java.util.LinkedList;
import java.util.Stack;

public class DFS {

    static int vertices;
    static LinkedList<Integer>[] adjacentList;

    public DFS(int vertices) {
        this.vertices = vertices;
        adjacentList = new LinkedList[vertices];
        visited = new boolean[vertices];
        for (int i = 0; i < vertices; i++) {
            adjacentList[i] = new LinkedList<>();   //creating a new linked list for every memory block in the array
        }

    }

    static Stack<Integer> stack = new Stack<>();
    static boolean[] visited;

    public void addEdge(int u, int v) {
        adjacentList[u].add(v);                 //Creating the graph
    }

    public static void dfs(int startVertex) {

        stack.push(startVertex);
        visited[startVertex] = true;
        //The below logic is written so as to print the value of the encountered node
        System.out.println("The DFS of the present graph is: ");
        while (!stack.empty()) {
            startVertex = stack.pop();
            System.out.print(startVertex + " ");  //Printing the contents of the visited node

            //The below logic is written in order to store the adjacent nodes of the encountered one into the data structure used
            for (int neighbour : adjacentList[startVertex]) {
                if (!visited[neighbour]) { //If no entry of the encountered node is found into the data structure
                    stack.push(neighbour); //Push it
                    visited[neighbour] = true; //Turn its flag into marked

                }


            }
        }
    }

    public void printGraph() {
        for (int i = 0; i < vertices; i++) {
            System.out.println("The adjacent nodes of " + i + ":");
            for (Integer item : adjacentList[i]) {
                System.out.println(item + " ");
            }
            System.out.println();
        }
    }


    public static void main(String[] args) {
        vertices = 5;

        DFS graph = new DFS(vertices);

        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(0, 3);
        graph.addEdge(2, 3);
        graph.addEdge(2, 4);

        graph.printGraph();
        dfs(0);
    }
}


